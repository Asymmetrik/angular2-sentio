{"version":3,"sources":["sentio/util/resize.util.ts"],"names":[],"mappings":"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","file":"resize.util.js","sourcesContent":["import { ElementRef } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport * as d3 from 'd3';\n\nexport class ResizeDimension {\n\tconstructor(public width: number, public height: number) { }\n}\n\n/**\n * Resize utility class\n */\nexport class ResizeUtil {\n\tchartElement: any;\n\tenabled: boolean;\n\n\tresizeSource: Observable<ResizeDimension>;\n\tresizeObserver: Observer<ResizeDimension>;\n\n\tconstructor(el: ElementRef, enabled: boolean = true, debounce: number = 200, sample: number = 100) {\n\t\tthis.enabled = enabled;\n\n\t\tthis.chartElement = d3.select(el.nativeElement);\n\n\t\t// Create a hot observable for resize events\n\t\tthis.resizeSource = Observable\n\t\t\t.create((observer: Observer<ResizeDimension>) => {\n\t\t\t\tthis.resizeObserver = observer;\n\t\t\t})\n\t\t\t.publish()\n\t\t\t.refCount()\n\t\t\t.filter(() => this.enabled);\n\n\t\tif (null != debounce) {\n\t\t\tthis.resizeSource = this.resizeSource.debounceTime(debounce);\n\t\t}\n\t\tif (null != sample) {\n\t\t\tthis.resizeSource = this.resizeSource.sample(Observable.interval(sample));\n\t\t}\n\t\tthis.resizeSource = this.resizeSource.map(() => this.getSize());\n\t}\n\n\t/**\n\t * Determines the numerical dimension given a string representation\n\t * Assumes the string is in the form 'NNNNNpx', more specifically\n\t * an arbitrarily long sequence of digits terminated by 'px'\n\t *\n\t * @param dimStr A string representation of the pixel size\n\t * @returns {number} the numerical representation of the pixel size\n\t */\n\tstatic getPixelDimension(dimStr: string): number {\n\t\tlet dim: number;\n\n\t\tif (null != dimStr && '' !== dimStr) {\n\t\t\tdim = parseFloat(dimStr.substring(0, dimStr.length - 2));\n\t\t\tif (null == dim || isNaN(dim)) {\n\t\t\t\tdim = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn dim;\n\t}\n\n\t/**\n\t * Returns the size of the element (only returns height/width if they are specified on the DOM elements)\n\t * Checks attributes and style\n\t *\n\t * @param element\n\t * @returns {ResizeDimension}\n\t */\n\tstatic getSpecifiedSize(element: any): ResizeDimension {\n\t\tlet width: number = element.attributes.width || ResizeUtil.getPixelDimension(element.style.width);\n\t\tlet height: number = element.attributes.height || ResizeUtil.getPixelDimension(element.style.height);\n\n\t\treturn new ResizeDimension(width, height);\n\t}\n\n\t/**\n\t * Returns the size of the element\n\t * Checks client size\n\t *\n\t * @param element\n\t * @returns {ResizeDimension}\n\t */\n\tstatic getActualSize(element: any): ResizeDimension {\n\t\tlet width: number = element.clientWidth;\n\t\tlet height: number = element.clientHeight;\n\n\t\treturn new ResizeDimension(width, height);\n\t}\n\n\t/**\n\t * Gets the specified dimensions of the element\n\t * @returns {ResizeDimension}\n\t */\n\tgetSpecifiedSize(): ResizeDimension {\n\t\treturn ResizeUtil.getSpecifiedSize(this.chartElement.node());\n\t}\n\n\t/**\n\t * Get the element size (with no overflow)\n\t * @returns {ResizeDimension}\n\t */\n\tgetActualSize(): ResizeDimension {\n\n\t\t// Get the raw body element\n\t\tlet body = document.body;\n\n\t\t// Cache the old overflow style\n\t\tlet overflow: string = body.style.overflow;\n\t\tbody.style.overflow = 'hidden';\n\n\t\t// The first element child of our selector should be the <div> we injected\n\t\tlet rawElement = this.chartElement.node().firstElementChild;\n\n\t\tlet size = ResizeUtil.getActualSize(rawElement);\n\n\t\t// Reapply the old overflow setting\n\t\tbody.style.overflow = overflow;\n\n\t\treturn size;\n\t}\n\n\t/**\n\t * Gets the size of the element (this is the actual size overridden by specified size)\n\t * @returns {ResizeDimension}\n\t */\n\tgetSize(): ResizeDimension {\n\t\tlet specifiedSize = this.getSpecifiedSize();\n\t\tlet size = this.getActualSize();\n\n\t\tif (null != specifiedSize.height) {\n\t\t\tsize.height = specifiedSize.height;\n\t\t}\n\t\tif (null != specifiedSize.width) {\n\t\t\tsize.width = specifiedSize.width;\n\t\t}\n\n\t\treturn size;\n\t}\n\n\tdestroy(): void {\n\t\tthis.resizeObserver.complete();\n\t}\n}\n"]}