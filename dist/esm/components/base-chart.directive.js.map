{"version":3,"sources":["../../src/components/base-chart.directive.ts"],"names":[],"mappings":";;;;;;;;;IAEA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;IAGzB;;OAEG;IACH;QAKC,4BAAY,EAAc,EAAE,KAAK;YAChC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;YAChD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YAEnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAEnC,sCAAsC;YACtC,IAAI,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAChF,IAAI,MAAM,GAAW,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAClF,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC;QAYD;;;;;;;WAOG;QACH,8CAAiB,GAAjB,UAAkB,MAAc;YAC/B,IAAI,GAAW,CAAC;YAEhB,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,IAAI,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC;gBACrC,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzD,EAAE,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC/B,GAAG,GAAG,SAAS,CAAC;gBACjB,CAAC;YACF,CAAC;YAED,MAAM,CAAC,GAAG,CAAC;QACZ,CAAC;QAED;;WAEG;QACH,mCAAM,GAAN;YACC,2BAA2B;YAC3B,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAEzB,+BAA+B;YAC/B,IAAI,QAAQ,GAAW,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC3C,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAE/B,0EAA0E;YAC1E,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;YAE3D,wFAAwF;YACxF,IAAI,KAAK,GAAW,UAAU,CAAC,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,IAAI,UAAU,CAAC,WAAW,CAAC;YACpG,IAAI,MAAM,GAAW,UAAU,CAAC,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,IAAI,UAAU,CAAC,YAAY,CAAC;YAExG,mCAAmC;YACnC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAE/B,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAC/C,CAAC;QAED;;WAEG;QACH,wCAAW,GAAX;YAAA,iBAKC;YAJA,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC9B,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAChC,CAAC;YACD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,EAAE,EAAb,CAAa,EAAE,GAAG,CAAC,CAAC;QACzD,CAAC;QACF,yBAAC;IAAD,CAjFA,AAiFC,IAAA;IAjFqB,0BAAkB,qBAiFvC,CAAA","file":"base-chart.directive.js","sourcesContent":["import { ElementRef } from '@angular/core';\n\nimport * as d3 from 'd3';\n\n\n/**\n * Base Directive Object for all charts\n */\nexport abstract class BaseChartDirective {\n\tchart: any;\n\tchartElement: any;\n\tresizeTimer: number;\n\n\tconstructor(el: ElementRef, chart) {\n\t\tthis.chartElement = d3.select(el.nativeElement);\n\t\tthis.chart = chart;\n\n\t\tthis.chart.init(this.chartElement);\n\n\t\t// Extract the dimensions of the chart\n\t\tlet width: number = this.getPixelDimension(this.chartElement[0][0].style.width);\n\t\tlet height: number = this.getPixelDimension(this.chartElement[0][0].style.height);\n\t\tthis.setChartDimensions(width, height, true);\n\t}\n\n\t/**\n\t * Set the chart dimensions according to the implementation\n\t * behavior, the configuration, and the parameters.\n\t *\n\t * @param width Width to which to optionally resize in pixels\n\t * @param height Height to which to optionally resize in pixels\n\t * @param force Should the resize ignore the resize configuration? (optional, should default to false)\n\t */\n\tabstract setChartDimensions(width: number, height: number, force?: boolean): void;\n\n\t/**\n\t * Determines the numerical dimension given a string representation\n\t * Assumes the string is in the form \"NNNNN\"px\"\", more specifically\n\t * an arbitrarily long sequence of digits terminated by \"px\"\n\t *\n\t * @param dimStr A string representation of the pixel size\n\t * @returns {number} the numerical representation of the pixel size\n\t */\n\tgetPixelDimension(dimStr: string): number {\n\t\tlet dim: number;\n\n\t\tif (null != dimStr && '' !== dimStr) {\n\t\t\tdim = parseFloat(dimStr.substring(0, dimStr.length - 2));\n\t\t\tif (null == dim || isNaN(dim)) {\n\t\t\t\tdim = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn dim;\n\t}\n\n\t/**\n\t * Resize the component\n\t */\n\tresize() {\n\t\t// Get the raw body element\n\t\tlet body = document.body;\n\n\t\t// Cache the old overflow style\n\t\tlet overflow: string = body.style.overflow;\n\t\tbody.style.overflow = 'hidden';\n\n\t\t// The first element child of our selector should be the <div> we injected\n\t\tlet rawElement = this.chartElement[0][0].firstElementChild;\n\n\t\t// Derive size of the parent (there are several ways to do this depending on the parent)\n\t\tlet width: number = rawElement.attributes.width || rawElement.style.width || rawElement.clientWidth;\n\t\tlet height: number = rawElement.attributes.height || rawElement.style.height || rawElement.clientHeight;\n\n\t\t// Reapply the old overflow setting\n\t\tbody.style.overflow = overflow;\n\n\t\tthis.setChartDimensions(width, height, false);\n\t}\n\n\t/**\n\t * Manage a delayed resize of the component\n\t */\n\tdelayResize() {\n\t\tif (null != this.resizeTimer) {\n\t\t\tclearTimeout(this.resizeTimer);\n\t\t}\n\t\tthis.resizeTimer = setTimeout(() => this.resize(), 200);\n\t}\n}\n"]}