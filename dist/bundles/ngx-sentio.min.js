/*! @asymmetrik/ngx-sentio - 5.0.0-alpha.1 - Copyright Asymmetrik, Ltd. 2007-2017 - All Rights Reserved. + */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@asymmetrik/sentio"),require("d3-selection"),require("rxjs")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@asymmetrik/sentio","d3-selection","rxjs"],e):e(t.ngxSentio={},t.ng.core,t.sentio,t.d3,t.Rx)}(this,function(t,e,r,i,s){"use strict";/**
 * Wrapper for chart info
 */
var a=/** @class */function(){/**
     * Creates the chart, binds it to the dom element.
     * This doesn't do any DOM manipulation yet.
     * @param el
     * @param chart
     */
function t(t,e,r){this.chartElement=i.select(t.nativeElement),this.chart=e,this.chartReady=r}/**
     * Initializes the chart, creating its DOM structure
     */
return t.prototype.initialize=function(){this.chart.init(this.chartElement),this.chartReady.emit(this.chart)},t}(),n=/** @class */function(){return function(t,e){this.width=t,this.height=e}}(),h=/** @class */function(){function t(t,e,r,a){void 0===e&&(e=!0),void 0===r&&(r=200),void 0===a&&(a=100);var n=this;this.enabled=e,this.chartElement=i.select(t.nativeElement),
// Create a hot observable for resize events
this.resizeSource=s.Observable.create(function(t){n.resizeObserver=t}).publish().refCount().filter(function(){return n.enabled}),null!=r&&(this.resizeSource=this.resizeSource.debounceTime(r)),null!=a&&(this.resizeSource=this.resizeSource.sample(s.Observable.interval(a))),this.resizeSource=this.resizeSource.map(function(){return n.getSize()})}/**
     * Determines the numerical dimension given a string representation
     * Assumes the string is in the form 'NNNNNpx', more specifically
     * an arbitrarily long sequence of digits terminated by 'px'
     *
     * @param dimStr A string representation of the pixel size
     * @returns {number} the numerical representation of the pixel size
     */
/**
     * Returns the size of the element (only returns height/width if they are specified on the DOM elements)
     * Checks attributes and style
     *
     * @param element
     * @returns {ResizeDimension}
     */
/**
     * Returns the size of the element
     * Checks client size
     *
     * @param element
     * @returns {ResizeDimension}
     */
/**
     * Gets the specified dimensions of the element
     * @returns {ResizeDimension}
     */
/**
     * Get the element size (with no overflow)
     * @returns {ResizeDimension}
     */
/**
     * Gets the size of the element (this is the actual size overridden by specified size)
     * Actual size should be based on the size of the parent
     *
     * @returns {ResizeDimension}
     */
return t.parseFloat=function(t,e){var r=parseFloat(t);return isNaN(r)?e:r},t.getPixelDimension=function(t){var e;return null!=t&&""!==t&&(null==(e=parseFloat(t.substring(0,t.length-2)))||isNaN(e))&&(e=void 0),e},t.getSpecifiedSize=function(e){var r=e.attributes.width||t.getPixelDimension(e.style.width),i=e.attributes.height||t.getPixelDimension(e.style.height);return new n(r,i)},t.getActualSize=function(e){var r=getComputedStyle(e),i=t.parseFloat(r.paddingLeft,0)+t.parseFloat(r.paddingRight,0),s=t.parseFloat(r.paddingTop,0)+t.parseFloat(r.paddingBottom,0),a=t.parseFloat(r.borderLeftWidth,0)+t.parseFloat(r.borderRightWidth,0),h=t.parseFloat(r.borderTopWidth,0)+t.parseFloat(r.borderBottomWidth,0),o=e.offsetWidth-i-a,p=e.offsetHeight-s-h;return new n(o,p)},t.prototype.getSpecifiedSize=function(){return t.getSpecifiedSize(this.chartElement.node())},t.prototype.getActualSize=function(){
// Get the raw body element
var e=document.body,r=e.style.overflow;e.style.overflow="hidden";
// The first element child of our selector should be the <div> we injected
var i=this.chartElement.node().parentElement,s=t.getActualSize(i);
// Reapply the old overflow setting
return e.style.overflow=r,s},t.prototype.getSize=function(){var t=this.getSpecifiedSize(),e=this.getActualSize();return null!=t.height&&(e.height=t.height),null!=t.width&&(e.width=t.width),e},t.prototype.destroy=function(){this.resizeObserver.complete()},t}(),o=/** @class */function(){function t(t){
// Chart Ready event
this.chartReady=new e.EventEmitter,
// Create the chart
this.chartWrapper=new a(t,r.chartDonut(),this.chartReady),
// Set up the resizer
this.resizeUtil=new h(t,this.resizeEnabled)}/**
     * For the donut chart, we pin the height to the width
     * to keep the aspect ratio correct
     */
/** @nocollapse */
return t.prototype.setChartDimensions=function(t,e){void 0===e&&(e=!1),(e||this.resizeEnabled)&&null!=t.width&&this.chartWrapper.chart.width()!==t.width&&
// pin the height to the width
this.chartWrapper.chart.width(t.width).height(t.width).resize()},t.prototype.onResize=function(t){this.resizeUtil.resizeObserver.next(t)},t.prototype.ngOnInit=function(){var t=this;
// Initialize the chart
this.chartWrapper.initialize(),
// Set up the resize callback
this.resizeUtil.resizeSource.subscribe(function(){
// Do the resize operation
t.setChartDimensions(t.resizeUtil.getSize()),t.chartWrapper.chart.redraw()}),
// Set the initial size of the chart
this.setChartDimensions(this.resizeUtil.getSize(),!0),this.chartWrapper.chart.redraw()},t.prototype.ngOnDestroy=function(){this.resizeUtil.destroy()},t.prototype.ngOnChanges=function(t){var e=!1,r=!1;t.sentioData&&(this.chartWrapper.chart.data(this.data),r=r||!t.sentioData.isFirstChange()),t.sentioDuration&&this.chartWrapper.chart.duration(this.duration),t.sentioColorScale&&(this.chartWrapper.chart.colorScale(this.colorScale),r=r||!t.sentioColorScale.isFirstChange()),t.sentioResize&&(this.resizeUtil.enabled=this.resizeEnabled,e=e||this.resizeEnabled&&!t.sentioResize.isFirstChange(),r=r||e),
// Only redraw once if necessary
e&&this.chartWrapper.chart.resize(),r&&this.chartWrapper.chart.redraw()},t.decorators=[{type:e.Directive,args:[{selector:"sentioDonutChart"}]}],t.ctorParameters=function(){return[{type:e.ElementRef}]},t.propDecorators={data:[{type:e.Input,args:["sentioData"]}],colorScale:[{type:e.Input,args:["sentioColorScale"]}],resizeEnabled:[{type:e.Input,args:["sentioResize"]}],duration:[{type:e.Input,args:["sentioDuration"]}],chartReady:[{type:e.Output,args:["sentioChartReady"]}],onResize:[{type:e.HostListener,args:["window:resize",["$event"]]}]},t}(),p=/** @class */function(){function t(t){
// Chart Ready event
this.chartReady=new e.EventEmitter,
// Create the chart
this.chartWrapper=new a(t,r.chartMatrix(),this.chartReady)}/** @nocollapse */
return t.prototype.ngOnInit=function(){
// Initialize the chart
this.chartWrapper.initialize(),this.chartWrapper.chart.redraw()},t.prototype.ngOnDestroy=function(){},t.prototype.ngOnChanges=function(t){var e=!1;t.sentioModel&&(this.chartWrapper.chart.data(this.data),e=e||!t.sentioModel.isFirstChange()),t.sentioDuration&&this.chartWrapper.chart.duration(this.duration),
// Only redraw once if possible
e&&this.chartWrapper.chart.redraw()},t.decorators=[{type:e.Directive,args:[{selector:"sentioMatrixChart"}]}],t.ctorParameters=function(){return[{type:e.ElementRef}]},t.propDecorators={data:[{type:e.Input,args:["sentioData"]}],duration:[{type:e.Input,args:["sentioDuration"]}],chartReady:[{type:e.Output,args:["sentioChartReady"]}]},t}(),u=/** @class */function(){/**
     * Creates the chart, binds it to the dom element.
     * This doesn't do any DOM manipulation yet.
     * @param el
     * @param chart
     */
function t(t){/**
         * Did the state of the brush change?
         */
this.didBrushChange=function(t,e){
// Deep compare the brush
return t!==e&&(null==t||null==e||t[0]!==e[0]||t[1]!==e[1])},this.chartWrapper=t}return t.prototype.setChartDimensions=function(t,e,r,i){void 0===i&&(i=!1);var s=!1;(i||e)&&null!=t.width&&this.chartWrapper.chart.width()!==t.width&&(
// pin the height to the width
this.chartWrapper.chart.width(t.width),s=!0),(i||r)&&null!=t.height&&this.chartWrapper.chart.height()!==t.height&&(
// pin the height to the width
this.chartWrapper.chart.height(t.height),s=!0),s&&this.chartWrapper.chart.resize()},t}(),c=/** @class */function(){function t(t){
// Chart Ready event
this.chartReady=new e.EventEmitter,
// Interaction events
this.markerMouseover=new e.EventEmitter,this.markerMouseout=new e.EventEmitter,this.markerClick=new e.EventEmitter,
// Create the chart
this.chartWrapper=new a(t,r.chartRealtimeTimeline(),this.chartReady),
// Set up the resizer
this.resizeUtil=new h(t,this.resizeHeight||this.resizeWidth),this.timelineUtil=new u(this.chartWrapper)}/** @nocollapse */
return t.prototype.onResize=function(t){this.resizeUtil.resizeObserver.next(t)},t.prototype.ngOnInit=function(){var t=this;
// Initialize the chart
this.chartWrapper.initialize(),
// register for the marker events
this.chartWrapper.chart.dispatch().on("markerClick",function(e){t.markerClick.emit(e)}),this.chartWrapper.chart.dispatch().on("markerMouseover",function(e){t.markerMouseover.emit(e)}),this.chartWrapper.chart.dispatch().on("markerMouseout",function(e){t.markerMouseout.emit(e)}),
// Set up the resize callback
this.resizeUtil.resizeSource.subscribe(function(){
// Do the resize operation
t.timelineUtil.setChartDimensions(t.resizeUtil.getSize(),t.resizeWidth,t.resizeHeight),t.chartWrapper.chart.redraw()}),
// Set the initial size of the chart
this.timelineUtil.setChartDimensions(this.resizeUtil.getSize(),this.resizeWidth,this.resizeHeight,!0),this.chartWrapper.chart.redraw()},t.prototype.ngOnDestroy=function(){this.resizeUtil.destroy()},t.prototype.ngOnChanges=function(t){var e=!1;t.sentioData&&(this.chartWrapper.chart.data(this.data),e=e||!t.sentioData.isFirstChange()),t.sentioSeries&&(this.chartWrapper.chart.series(this.series),e=e||!t.sentioSeries.isFirstChange()),t.sentioMarkers&&(this.chartWrapper.chart.markers(this.markers),e=e||!t.sentioMarkers.isFirstChange()),t.sentioYExtent&&(this.chartWrapper.chart.yExtent().overrideValue(this.yExtent),e=e||!t.sentioYExtent.isFirstChange()),t.sentioXExtent&&(this.chartWrapper.chart.xExtent().overrideValue(this.xExtent),e=e||!t.sentioXExtent.isFirstChange()),t.sentioFps&&this.chartWrapper.chart.fps(this.fps),t.sentioDelay&&(this.chartWrapper.chart.delay(this.delay),e=e||!t.sentioDelay.isFirstChange()),t.sentioInterval&&(this.chartWrapper.chart.interval(this.interval),e=e||!t.sentioInterval.isFirstChange()),e&&this.chartWrapper.chart.redraw()},t.decorators=[{type:e.Directive,args:[{selector:"sentioRealtimeTimeline"}]}],t.ctorParameters=function(){return[{type:e.ElementRef}]},t.propDecorators={data:[{type:e.Input,args:["sentioData"]}],series:[{type:e.Input,args:["sentioSeries"]}],markers:[{type:e.Input,args:["sentioMarkers"]}],yExtent:[{type:e.Input,args:["sentioYExtent"]}],xExtent:[{type:e.Input,args:["sentioXExtent"]}],delay:[{type:e.Input,args:["sentioDelay"]}],fps:[{type:e.Input,args:["sentioFps"]}],interval:[{type:e.Input,args:["sentioInterval"]}],resizeWidth:[{type:e.Input,args:["sentioResizeWidth"]}],resizeHeight:[{type:e.Input,args:["sentioResizeHeight"]}],chartReady:[{type:e.Output,args:["sentioChartReady"]}],markerMouseover:[{type:e.Output,args:["sentioMarkerMouseover"]}],markerMouseout:[{type:e.Output,args:["sentioMarkerMouseout"]}],markerClick:[{type:e.Output,args:["sentioMarkerClick"]}],onResize:[{type:e.HostListener,args:["window:resize",["$event"]]}]},t}(),l=/** @class */function(){function t(t){
// Chart Ready event
this.chartReady=new e.EventEmitter,this.brushChange=new e.EventEmitter,
// Interaction events
this.markerMouseover=new e.EventEmitter,this.markerMouseout=new e.EventEmitter,this.markerClick=new e.EventEmitter,
// Create the chart
this.chartWrapper=new a(t,r.chartTimeline(),this.chartReady),
// Set up the resizer
this.resizeUtil=new h(t,this.resizeHeight||this.resizeWidth),this.timelineUtil=new u(this.chartWrapper)}/** @nocollapse */
return t.prototype.onResize=function(t){this.resizeUtil.resizeObserver.next(t)},t.prototype.ngOnInit=function(){var t=this;
// Initialize the chart
this.chartWrapper.initialize(),
// register for the marker events
this.chartWrapper.chart.dispatch().on("markerClick",this.markerClick.emit).on("markerMouseover",this.markerMouseover.emit).on("markerMouseout",this.markerMouseout.emit),
// register for the brush end event
this.chartWrapper.chart.dispatch().on("brushEnd",function(e){
// If the brush actually changed, emit the event
t.timelineUtil.didBrushChange(e,t.brushState)&&setTimeout(function(){t.brushChange.emit(e)})}),
// Set up the resize callback
this.resizeUtil.resizeSource.subscribe(function(){
// Do the resize operation
t.timelineUtil.setChartDimensions(t.resizeUtil.getSize(),t.resizeWidth,t.resizeHeight),t.chartWrapper.chart.redraw()}),
// Set the initial size of the chart
this.timelineUtil.setChartDimensions(this.resizeUtil.getSize(),this.resizeWidth,this.resizeHeight,!0),this.chartWrapper.chart.redraw(),
// Set the brush (if it exists)
null!=this.brushState&&this.chartWrapper.chart.setBrush(this.brushState)},t.prototype.ngOnDestroy=function(){this.resizeUtil.destroy()},t.prototype.ngOnChanges=function(t){var e=!1;t.sentioData&&(this.chartWrapper.chart.data(this.data),e=e||!t.sentioData.isFirstChange()),t.sentioSeries&&(this.chartWrapper.chart.series(this.series),e=e||!t.sentioSeries.isFirstChange()),t.sentioMarkers&&(this.chartWrapper.chart.markers(this.markers),e=e||!t.sentioMarkers.isFirstChange()),t.sentioYExtent&&(this.chartWrapper.chart.yExtent().overrideValue(this.yExtent),e=e||!t.sentioYExtent.isFirstChange()),t.sentioXExtent&&(this.chartWrapper.chart.xExtent().overrideValue(this.xExtent),e=e||!t.sentioXExtent.isFirstChange()),t.sentioBrushEnabled&&(this.chartWrapper.chart.brush(this.brushEnabled),e=e||!t.sentioBrushEnabled.isFirstChange()),t.sentioBrush&&!t.sentioBrush.isFirstChange()&&this.timelineUtil.didBrushChange(t.sentioBrush.currentValue,t.sentioBrush.previousValue)&&(this.chartWrapper.chart.setBrush(this.brushState),e=!0),e&&this.chartWrapper.chart.redraw()},t.decorators=[{type:e.Directive,args:[{selector:"sentioTimeline"}]}],t.ctorParameters=function(){return[{type:e.ElementRef}]},t.propDecorators={data:[{type:e.Input,args:["sentioData"]}],series:[{type:e.Input,args:["sentioSeries"]}],markers:[{type:e.Input,args:["sentioMarkers"]}],yExtent:[{type:e.Input,args:["sentioYExtent"]}],xExtent:[{type:e.Input,args:["sentioXExtent"]}],resizeWidth:[{type:e.Input,args:["sentioResizeWidth"]}],resizeHeight:[{type:e.Input,args:["sentioResizeHeight"]}],chartReady:[{type:e.Output,args:["sentioChartReady"]}],brushEnabled:[{type:e.Input,args:["sentioBrushEnabled"]}],brushState:[{type:e.Input,args:["sentioBrush"]}],brushChange:[{type:e.Output,args:["sentioBrushChange"]}],markerMouseover:[{type:e.Output,args:["sentioMarkerMouseover"]}],markerMouseout:[{type:e.Output,args:["sentioMarkerMouseout"]}],markerClick:[{type:e.Output,args:["sentioMarkerClick"]}],onResize:[{type:e.HostListener,args:["window:resize",["$event"]]}]},t}(),d=/** @class */function(){function t(t){
// Chart Ready event
this.chartReady=new e.EventEmitter,
// Create the chart
this.chartWrapper=new a(t,r.chartVerticalBars(),this.chartReady),
// Set up the resizer
this.resizeUtil=new h(t,this.resizeEnabled)}/**
     * For The vertical bar chart, we just resize width
     */
/** @nocollapse */
return t.prototype.setChartDimensions=function(t,e){void 0===e&&(e=!1),(e||this.resizeEnabled)&&null!=t.width&&this.chartWrapper.chart.width()!==t.width&&
// pin the height to the width
this.chartWrapper.chart.width(t.width).resize()},t.prototype.onResize=function(t){this.resizeUtil.resizeObserver.next(t)},t.prototype.ngOnInit=function(){var t=this;
// Initialize the chart
this.chartWrapper.initialize(),
// Set up the resize callback
this.resizeUtil.resizeSource.subscribe(function(){
// Do the resize operation
t.setChartDimensions(t.resizeUtil.getSize()),t.chartWrapper.chart.redraw()}),
// Set the initial size of the chart
this.setChartDimensions(this.resizeUtil.getSize(),!0),this.chartWrapper.chart.redraw()},t.prototype.ngOnDestroy=function(){this.resizeUtil.destroy()},t.prototype.ngOnChanges=function(t){var e=!1,r=!1;t.sentioData&&(this.chartWrapper.chart.data(this.data),r=r||!t.sentioData.isFirstChange()),t.sentioWidthExtent&&(this.chartWrapper.chart.widthExtent().overrideValue(this.widthExtent),r=r||!t.sentioWidthExtent.isFirstChange()),t.sentioResize&&(this.resizeUtil.enabled=this.resizeEnabled,e=e||this.resizeEnabled&&!t.sentioResize.isFirstChange(),r=r||e),
// Only redraw once if necessary
e&&this.chartWrapper.chart.resize(),r&&this.chartWrapper.chart.redraw()},t.decorators=[{type:e.Directive,args:[{selector:"sentioVerticalBarChart"}]}],t.ctorParameters=function(){return[{type:e.ElementRef}]},t.propDecorators={data:[{type:e.Input,args:["sentioData"]}],widthExtent:[{type:e.Input,args:["sentioWidthExtent"]}],resizeEnabled:[{type:e.Input,args:["sentioResize"]}],duration:[{type:e.Input,args:["sentioDuration"]}],chartReady:[{type:e.Output,args:["sentioChartReady"]}],onResize:[{type:e.HostListener,args:["window:resize",["$event"]]}]},t}(),g=/** @class */function(){function t(t){
// Chart Ready event
this.chartReady=new e.EventEmitter,this.brushChange=new e.EventEmitter,
// Interaction events
this.markerMouseover=new e.EventEmitter,this.markerMouseout=new e.EventEmitter,this.markerClick=new e.EventEmitter,
// Create the chart
this.chartWrapper=new a(t,r.chartAutoBrushTimeline(),this.chartReady),
// Set up the resizer
this.resizeUtil=new h(t,this.resizeHeight||this.resizeWidth),this.timelineUtil=new u(this.chartWrapper)}/** @nocollapse */
return t.prototype.onResize=function(t){this.resizeUtil.resizeObserver.next(t)},t.prototype.ngOnInit=function(){var t=this;
// Initialize the chart
this.chartWrapper.initialize(),
// register for the marker events
this.chartWrapper.chart.dispatch().on("markerClick",this.markerClick.emit).on("markerMouseover",this.markerMouseover.emit).on("markerMouseout",this.markerMouseout.emit),
// register for the brush end event
this.chartWrapper.chart.dispatch().on("brushEnd",function(e){
// If the brush actually changed, emit the event
t.timelineUtil.didBrushChange(e,t.brushState)&&setTimeout(function(){t.brushChange.emit(e)})}),
// Set up the resize callback
this.resizeUtil.resizeSource.subscribe(function(){
// Do the resize operation
t.timelineUtil.setChartDimensions(t.resizeUtil.getSize(),t.resizeWidth,t.resizeHeight),t.chartWrapper.chart.redraw()}),
// Set the initial size of the chart
this.timelineUtil.setChartDimensions(this.resizeUtil.getSize(),this.resizeWidth,this.resizeHeight,!0),this.chartWrapper.chart.redraw(),
// Set the brush (if it exists)
null!=this.brushState&&this.chartWrapper.chart.setBrush(this.brushState)},t.prototype.ngOnDestroy=function(){this.resizeUtil.destroy()},t.prototype.ngOnChanges=function(t){var e=!1;t.sentioData&&(this.chartWrapper.chart.data(this.data),e=e||!t.sentioData.isFirstChange()),t.sentioSeries&&(this.chartWrapper.chart.series(this.series),e=e||!t.sentioSeries.isFirstChange()),t.sentioMarkers&&(this.chartWrapper.chart.markers(this.markers),e=e||!t.sentioMarkers.isFirstChange()),t.sentioYExtent&&(this.chartWrapper.chart.yExtent().overrideValue(this.yExtent),e=e||!t.sentioYExtent.isFirstChange()),t.sentioXExtent&&(this.chartWrapper.chart.xExtent().overrideValue(this.xExtent),e=e||!t.sentioXExtent.isFirstChange()),t.sentioBrushEnabled&&(this.chartWrapper.chart.brush(this.brushEnabled),e=e||!t.sentioBrushEnabled.isFirstChange()),t.sentioBrush&&!t.sentioBrush.isFirstChange()&&this.timelineUtil.didBrushChange(t.sentioBrush.currentValue,t.sentioBrush.previousValue)&&(this.chartWrapper.chart.setBrush(this.brushState),e=!0),e&&this.chartWrapper.chart.redraw()},t.decorators=[{type:e.Component,args:[{selector:"sentioAutoBrushTimeline",templateUrl:"auto-brush-timeline.component.html"}]}],t.ctorParameters=function(){return[{type:e.ElementRef}]},t.propDecorators={data:[{type:e.Input,args:["sentioData"]}],series:[{type:e.Input,args:["sentioSeries"]}],markers:[{type:e.Input,args:["sentioMarkers"]}],yExtent:[{type:e.Input,args:["sentioYExtent"]}],xExtent:[{type:e.Input,args:["sentioXExtent"]}],resizeWidth:[{type:e.Input,args:["sentioResizeWidth"]}],resizeHeight:[{type:e.Input,args:["sentioResizeHeight"]}],chartReady:[{type:e.Output,args:["sentioChartReady"]}],brushEnabled:[{type:e.Input,args:["sentioBrushEnabled"]}],brushState:[{type:e.Input,args:["sentioBrush"]}],brushChange:[{type:e.Output,args:["sentioBrushChange"]}],markerMouseover:[{type:e.Output,args:["sentioMarkerMouseover"]}],markerMouseout:[{type:e.Output,args:["sentioMarkerMouseout"]}],markerClick:[{type:e.Output,args:["sentioMarkerClick"]}],onResize:[{type:e.HostListener,args:["window:resize",["$event"]]}]},t}(),y=/** @class */function(){function t(){}/** @nocollapse */
return t.forRoot=function(){return{ngModule:t,providers:[]}},t.decorators=[{type:e.NgModule,args:[{exports:[g,o,p,c,l,d],declarations:[g,o,p,c,l,d]}]}],t.ctorParameters=function(){return[]},t}();t.SentioModule=y,Object.defineProperty(t,"__esModule",{value:!0})});